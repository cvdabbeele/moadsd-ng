---
# #####################################################################
# Create MOADSD-NG Environment in GCP
# #####################################################################
- name: Check if Google cloud SDK is installed
  command: gcloud version
  register: gcloud_installed
  changed_when: false
  ignore_errors: yes

- fail:
    msg: "Please make sure Google Cloud SDK is installed before executing the role."
  when: gcloud_installed is failed

- name: Include site credentials
  include_vars: vars/site_secrets.yml

- name: Include vars for GCP
  include_vars: "{{ item }}"
  with_items:
    - vars/environment_gcp_secrets.yml
    - vars/environment_gcp_vars.yml
  when: type == 'gcp'

- name: Report
  uri:
    url: "{{ report_url }}"
    method: POST
    headers:
      x-api-key: "{{ report_key | b64decode }}"
    validate_certs: yes
    body_format: json
    body: |
      {
          "TableName": "moadsd-ng-reporter",
      	  "Item": {
      	    "datetime": {"S": "{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}" },
      	    "admin_email": {"S": "{{ admin_email | hash('sha256') }}" },
      	    "type": {"S": "{{ type }}" },
      	    "action": {"S": "{{ run_pb }}" },
      	    "site_deploy_kubernetes": {"S": "{{ site_deploy_kubernetes }}" },
      	    "site_deploy_openshift": {"S": "{{ site_deploy_openshift }}" },
      	    "site_deploy_deepsecurity": {"S": "{{ site_deploy_deepsecurity }}" },
      	    "site_deploy_smartcheck": {"S": "{{ site_deploy_smartcheck }}" },
      	    "site_deploy_jenkins": {"S": "{{ site_deploy_jenkins }}" },
      	    "site_deploy_gitlab": {"S": "{{ site_deploy_gitlab }}" },
      	    "site_deploy_endpoints": {"S": "{{ site_deploy_endpoints }}" },
      	    "site_deploy_linkerd": {"S": "{{ site_deploy_linkerd }}" },
      	    "site_deploy_prometheus": {"S": "{{ site_deploy_prometheus }}" },
      	    "site_deploy_grafana": {"S": "{{ site_deploy_grafana }}" },
      	    "site_deploy_opa": {"S": "{{ site_deploy_opa }}" },
      	    "site_deploy_jumphost": {"S": "{{ site_deploy_jumphost }}" }
      	}
      }
    status_code: 200
  delegate_to: localhost

- name: Create GCP network
  include_role:
    name: environment-gcp
  vars:
    operation: create_network

- name: Check if router already exists
  delegate_to: 127.0.0.1
  command: gcloud compute routers describe {{ moadsd_ng_prefix }}-router --region {{ gcp_region }}
  register: gcloud_router_installed
  changed_when: false
  #"'ERROR' is in gcloud_router_installed"
  no_log: yes
  ignore_errors: yes

- name: Create router
  delegate_to: 127.0.0.1
  command: gcloud compute routers create {{ moadsd_ng_prefix }}-router --network {{ moadsd_ng_prefix }}-network --region {{ gcp_region }}
  when: gcloud_router_installed is failed

- name: Check if nat config already exists
  delegate_to: 127.0.0.1
  command: gcloud compute routers nats describe nat-config --router={{ moadsd_ng_prefix }}-router --region {{ gcp_region }}
  register: gcloud_nat_config_installed
  changed_when: false
  #"'ERROR' is in gcloud_nat_config_installed"
  no_log: yes
  ignore_errors: yes

- name: Create nat config
  delegate_to: 127.0.0.1
  command: gcloud compute routers nats create nat-config --router={{ moadsd_ng_prefix }}-router --auto-allocate-nat-external-ips --nat-all-subnet-ip-ranges --enable-logging --region {{ gcp_region }}
  when: gcloud_nat_config_installed is failed

- name: Create linux instance for jumphost
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_instance
    instance_name: "{{ jumphost_instance_name }}"
    instance_source_image: "{{ jumphost_source_image }}"
    instance_size_gb: "{{ jumphost_size_gb }}"
    instance_machine_type: "{{ jumphost_machine_type }}"
    instance_startup_script: "{{ jumphost_startup_script }}"
    instance_tags: "{{ jumphost_tags }}"
    instance_public_address: True
    instance_ports_anywhere:
      - '22'
      - '80'
      - '443'
    instance_ports_network:
      - '1-65535'
  when: site_deploy_jumphost == True

- name: Find yml files in group_vars
  find:
    paths: "./group_vars"
    patterns: "*.yml"
  register: files_to_delete

- name: Delete yml files in group_vars
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ files_to_delete.files }}"

- name: Configure group_vars
  delegate_to: 127.0.0.1
  copy:
    dest: "{{ item }}"
    content: |
      {% raw %}ansible_ssh_common_args: -o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p ansible@{{ groups['moadsd_ng_jumphost_instance_public'][0] }}"{% endraw %}
    force: yes
  loop:
    - "./group_vars/tag_{{ kubernetes_master_tags | regex_replace('-', '_') }}.yml"
    - "./group_vars/tag_{{ kubernetes_worker_tags | regex_replace('-', '_') }}.yml"
    - "./group_vars/tag_{{ openshift_tags | regex_replace('-', '_') }}.yml"
    - "./group_vars/tag_{{ postgresql_tags | regex_replace('-', '_') }}.yml"
    - "./group_vars/tag_{{ deepsecurity_tags | regex_replace('-', '_') }}.yml"
    - "./group_vars/tag_{{ linuxep_tags | regex_replace('-', '_') }}.yml"
  when: site_deploy_jumphost == True

- name: Create instance for PostgreSQL
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_instance
    instance_name: "{{ postgresql_instance_name }}"
    instance_source_image: "{{ postgresql_source_image }}"
    instance_size_gb: "{{ postgresql_size_gb }}"
    instance_machine_type: "{{ postgresql_machine_type }}"
    instance_startup_script: "{{ postgresql_startup_script }}"
    instance_tags: "{{ postgresql_tags }}"
    instance_public_address: False
    instance_ports_anywhere:
      - '22'
    instance_ports_network:
      - '22'
      - "{{ databasescreen_port |string }}"
  when:
    - site_deploy_deepsecurity == True
    - deepsecurity_variant == 'dsm'

- name: Create instance for Deep Security Manager
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_instance
    instance_name: "{{ deepsecurity_instance_name }}"
    instance_source_image: "{{ deepsecurity_source_image }}"
    instance_size_gb: "{{ deepsecurity_size_gb }}"
    instance_machine_type: "{{ deepsecurity_machine_type }}"
    instance_startup_script: "{{ deepsecurity_startup_script }}"
    instance_tags: "{{ deepsecurity_tags }}"
    instance_public_address: False
    instance_ports_anywhere:
      - '22'
      - "{{ addressandportsscreen_managerport |string }}"
      - "{{ addressandportsscreen_heartbeatport |string }}"
      - "{{ addressandportsscreen_agentport |string }}"
    instance_ports_network:
      - '22'
      - "{{ addressandportsscreen_managerport |string }}"
      - "{{ addressandportsscreen_heartbeatport |string }}"
      - "{{ addressandportsscreen_agentport |string }}"
  when:
    - site_deploy_deepsecurity == True
    - deepsecurity_variant == 'dsm'

- name: Create instance for Kubernetes master
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_instance
    instance_name: "{{ kubernetes_master_instance_name }}"
    instance_source_image: "{{ kubernetes_master_source_image }}"
    instance_size_gb: "{{ kubernetes_master_size_gb }}"
    instance_machine_type: "{{ kubernetes_master_machine_type }}"
    instance_startup_script: "{{ kubernetes_master_startup_script }}"
    instance_tags: "{{ kubernetes_master_tags }}"
    instance_public_address: False
    instance_ports_anywhere:
      - '22'
    instance_ports_network:
      - '1-65535'
  when: site_deploy_kubernetes == True

- name: Create instance for Kubernetes worker
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_instance
    instance_name: "{{ kubernetes_worker_instance_name }}{{ item }}"
    instance_source_image: "{{ kubernetes_worker_source_image }}"
    instance_size_gb: "{{ kubernetes_worker_size_gb }}"
    instance_machine_type: "{{ kubernetes_worker_machine_type }}"
    instance_startup_script: "{{ kubernetes_worker_startup_script }}"
    instance_tags: "{{ kubernetes_worker_tags }}"
    instance_public_address: False
    instance_ports_anywhere:
      - '22'
    instance_ports_network:
      - '1-65535'
  with_sequence: count="{{ kubernetes_worker_count }}"
  when: site_deploy_kubernetes == True

- name: Create instance for Openshift
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_vmx_instance
    instance_name: "{{ openshift_instance_name }}"
    instance_source_image: "{{ openshift_source_image }}"
    instance_size_gb: "{{ openshift_size_gb }}"
    instance_machine_type: "{{ openshift_machine_type }}"
    instance_startup_script: "{{ openshift_startup_script }}"
    instance_tags: "{{ openshift_tags }}"
    instance_public_address: True
    instance_ports_anywhere:
      - '22'
      - '80'
      - '443'
    instance_ports_network:
      - '1-65535'
  when: site_deploy_openshift == True

- name: Create linux instances for endpoints / servers
  include_role:
    name: environment-gcp
  vars:
    operation: create_linux_instance
    instance_name: "{{ linuxep_instance_name }}{{ item }}"
    instance_source_image: "{{ linuxep_source_image }}"
    instance_size_gb: "{{ linuxep_size_gb }}"
    instance_machine_type: "{{ linuxep_machine_type }}"
    instance_startup_script: "{{ linuxep_startup_script }}"
    instance_tags: "{{ linuxep_tags }}"
    instance_public_address: False
    instance_ports_anywhere:
      - '22'
    instance_ports_network:
      - '1-65535'
  with_sequence: count="{{ linuxep_instance_count }}"
  when: site_deploy_endpoints == True

- name: Create windows instances for endpoints / servers
  include_role:
    name: environment-gcp
  vars:
    operation: create_windows_instance
    instance_name: "{{ windowsep_instance_name }}{{ item }}"
    instance_source_image: "{{ windowsep_source_image }}"
    instance_size_gb: "{{ windowsep_size_gb }}"
    instance_machine_type: "{{ windowsep_machine_type }}"
    instance_startup_script: "{{ windowsep_startup_script }}"
    instance_tags: "{{ windowsep_tags }}"
    instance_public_address: True
    instance_ports_anywhere:
      - '3389'
      - '5986'
      - '5985'
    instance_ports_network:
      - '1-65535'
  with_sequence: count="{{ windowsep_instance_count }}"
  when: site_deploy_endpoints == True
