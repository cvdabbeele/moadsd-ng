---
# #####################################################################
# Deploy PostgreSQL database for Deep Security
# #####################################################################

# #####################################################################
# Query some private ips
# #####################################################################
- hosts: tag_role_jumphost
  tasks:
    - name: Get ipaddr of Jumphost
      set_fact:
        remote_ip: "{{ inventory_hostname | ipaddr}}"

    - name: Get ipaddr of Jumphost
      set_fact:
        remote_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      when: not remote_ip

    - name: Store external ip address of Jumphost
      add_host:
        name: "{{ remote_ip }}"
        groups: "moadsd_ng_jumphost_instance_public"

    - name: Store all Groups in Memory
      set_fact:
        moadsd_ng_groups: "{{ hostvars[inventory_hostname]['groups'] }}"

- hosts: localhost
  gather_facts: no
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Listing Jumphost Environment
      debug:
        msg:
          - "Jumphost                     : {{ hostvars[inventory_hostname]['groups']['tag_role_jumphost'][0] }}"
      when: site_deploy_jumphost == True

    - name: Listing Kubernetes Environment
      debug:
        msg:
          - "Kubernetes Master            : {{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
          - "Kubernetes Worker 1          : {{ hostvars[inventory_hostname]['groups']['tag_role_k8sworker'][0] }}"
      when: "'tag_role_k8smaster' is in groups"

    - name: Listing OpenShift Environment
      debug:
        msg:
          - "OpenShift Master             : {{ hostvars[inventory_hostname]['groups']['tag_role_openshift'][0] }}"
      when: "'tag_role_openshift' is in groups"

    - name: Listing Deep Security Environment
      debug:
        msg:
          - "Deep Security                : {{ hostvars[inventory_hostname]['groups']['tag_role_dsm'][0] }}"
          - "PostgreSQL                   : {{ hostvars[inventory_hostname]['groups']['tag_role_dsmdb'][0] }}"
      when: "'tag_role_dsm' is in groups"

# #####################################################################
# Deploy PostgreSQL database for Deep Security
# #####################################################################
- name: Create PostgreSQL database for Deep Security
  hosts: tag_role_dsm_db
  become: true

  vars:
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy PostgreSQL
      include_role:
        name: postgresql
      vars:
        operation: create_instance
        database_client: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsmdb'][0] }}"
      when: site_deploy_deepsecurity == True

    - name: Create Database for Deep Security in PostgreSQL
      include_role:
        name: postgresql
      vars:
        operation: create_database
        database_name: "{{ deepsecurity_database_name }}"
        database_user: "{{ deepsecurity_database_user }}"
        database_password: "{{ deepsecurity_database_password }}"
        database_role_attr_flags: "{{ deepsecurity_database_role_attr_flags }}"
        database_priv: "{{ deepsecurity_database_priv }}"
      when: site_deploy_deepsecurity == True

# #####################################################################
# Deploy Deep Security
# #####################################################################
- name: Deploy Deep Security
  hosts: tag_role_dsm
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Deep Security
      include_role:
        name: deepsecurity
      vars:
        operation: create_instance
        addressandportsscreen_manageraddress: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsm'][0] }}"
        licensescreen_license: '{{ deepsecurity_license }}'
        databasescreen_hostname: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsmdb'][0] }}"
        databasescreen_databasename: "{{ deepsecurity_database_name }}"
        databasescreen_username: "{{ deepsecurity_database_user }}"
        databasescreen_password: "{{ deepsecurity_database_password }}"
        credentialsscreen_administrator_username: "{{ deepsecurity_administrator_username }}"
        credentialsscreen_administrator_password: "{{ deepsecurity_administrator_password }}"
        dsm_download_url: "{{ deepsecurity_download_url }}"
        dsm_installer: "{{ deepsecurity_installer }}"
      when: site_deploy_deepsecurity == True
