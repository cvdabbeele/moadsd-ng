---
# #####################################################################
# Deploy MOADSD-NG Environment
# #####################################################################

# #####################################################################
# Query some private ips
# #####################################################################
- hosts: tag_role_jumphost
  tasks:
    - name: Get ipaddr of Jumphost
      set_fact:
        remote_ip: "{{ inventory_hostname | ipaddr}}"

    - name: Get ipaddr of Jumphost
      set_fact:
        remote_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      when: not remote_ip

    - name: Store external ip address of Jumphost
      add_host:
        name: "{{ remote_ip }}"
        groups: "moadsd_ng_jumphost_instance_public"

    - name: Store all Groups in Memory
      set_fact:
        moadsd_ng_groups: "{{ hostvars[inventory_hostname]['groups'] }}"

- hosts: localhost
  gather_facts: no
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Listing Jumphost Environment
      debug:
        msg:
          - "Jumphost                     : {{ hostvars[inventory_hostname]['groups']['tag_role_jumphost'][0] }}"
      when: site_deploy_jumphost == True

    - name: Listing Kubernetes Environment
      debug:
        msg:
          - "Kubernetes Master            : {{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
          - "Kubernetes Worker 1          : {{ hostvars[inventory_hostname]['groups']['tag_role_k8sworker'][0] }}"
      when: "'tag_role_k8smaster' is in groups"

    - name: Listing OpenShift Environment
      debug:
        msg:
          - "OpenShift Master             : {{ hostvars[inventory_hostname]['groups']['tag_role_openshift'][0] }}"
      when: "'tag_role_openshift' is in groups"

    - name: Listing Deep Security Environment
      debug:
        msg:
          - "Deep Security                : {{ hostvars[inventory_hostname]['groups']['tag_role_dsm'][0] }}"
          - "PostgreSQL                   : {{ hostvars[inventory_hostname]['groups']['tag_role_dsm_db'][0] }}"
      when: "'tag_role_dsm' is in groups"

    - name: Create Jumphost SSH Command
      delegate_to: 127.0.0.1
      copy:
        dest: "./ssh_jumphost"
        content: |
          ssh {{ hostvars[inventory_hostname]['groups']['tag_role_jumphost'][0] }}
        force: yes
        owner: ansible
        mode: '0700'

    - name: Create Master SSH Command
      delegate_to: 127.0.0.1
      copy:
        dest: "./ssh_master"
        content: |
          ssh -o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -W %h:%p {{ hostvars[inventory_hostname]['groups']['tag_role_jumphost'][0] }}" {{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}
        force: yes
        owner: ansible
        mode: '0700'


# #####################################################################
# Ensure src dst Checks are Disabled on AWS
# #####################################################################
- name: Ensure src dst Checks are Disabled on AWS
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Disable AWS src dst Checks
      become: true
      become_user: ansible
      shell: aws ec2 modify-instance-attribute --instance-id {{ hostvars[item]['ec2_id'] }} --region {{ aws_region }} --no-source-dest-check
      delegate_to: localhost
      with_inventory_hostnames: all
      when: type == "aws"

# #####################################################################
# Create http & https Proxy with Trusted Certificates
# #####################################################################
- name: Create and Configure Jumphost Proxy
  hosts: tag_role_jumphost
  become: true

  vars:
    trusted_certificates: "{{ trusted_certificates }}"
    create_proxy_configurations: True

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Create Proxy Configurations
      block:
        - name: Create Proxy instance
          include_role:
            name: proxy
          vars:
            operation: deploy
          when: site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for the Dashboard
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: dashboard
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ kubernetes_dashboard_nodeport }}"
            target_type: https
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for the Ceph Dashboard
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: ceph
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ rook_ceph_dashboard_nodeport }}"
            target_type: https
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        # - name: Create Proxy Configuration and Certificate for the Openshift
        #   include_role:
        #     name: proxy
        #   vars:
        #     operation: create_site
        #     service_name: openshift
        #     jumphost_external_ip: "{{ inventory_hostname }}"
        #     proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_openshift'][0] }}"
        #     node_port: "{{ openshift_dashboard }}"
        #     target_type: https
        #   when:
        #     - site_deploy_openshift == True
        #     - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for the Registry
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: registry
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ registry_nodeport }}"
            target_type: https
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Grafana
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: grafana
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ grafana_nodeport }}"
            target_type: http
          when:
            - site_deploy_kubernetes == True
            - site_deploy_grafana == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Smart Check
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: smartcheck
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ smartcheck_nodeport }}"
            target_type: https
          when:
            - site_deploy_smartcheck == True
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Smart Check Registry
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: smartcheck-registry
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ smartcheck_registry }}"
            target_type: https
          when:
            - site_deploy_smartcheck == True
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Jenkins
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: jenkins
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ jenkins_nodeport }}"
            target_type: http
          when:
            - site_deploy_jenkins == True
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Generate DNS Name for GitLab
          set_fact:
            service_dns_name_gitlab: "gitlab.{{ hostvars[inventory_hostname]['groups']['tag_role_k8sworker'][0] }}.{{ jumphost_tld }}"
          when:
            - site_deploy_gitlab == True
            - site_deploy_kubernetes == True

        # - name: Generate DNS Name for GitLab Registry
        #   set_fact:
        #     service_dns_name_gitlab: "https://registry.{{ hostvars[inventory_hostname]['groups']['tag_role_k8sworker'][0] }}.{{ jumphost_tld }}"
        #   when:
        #     - site_deploy_gitlab == True
        #     - site_deploy_kubernetes == True

        - name: Create Proxy Configuration and Certificate for GitLab
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: gitlab
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ service_dns_name_gitlab }}"
            node_port: "{{ gitlab_nodeport_https }}"
            target_type: https
          when:
            - site_deploy_gitlab == True
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Linkerd
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: linkerd
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ linkerd_dashboard_nodeport }}"
            target_type: http
          when:
            - site_deploy_linkerd == True
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Deep Security Manager
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: deepsecurity
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsm'][0] }}"
            node_port: "{{ addressandportsscreen_managerport }}"
            target_type: https
          when:
            - site_deploy_deepsecurity == True
            - deepsecurity_variant == 'dsm'
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Demoapp
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: demoapp
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ custom_nodeport }}"
            target_type: http
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Demoapp1
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: demoapp1
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ custom_nodeport1 }}"
            target_type: http
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Demoapp2
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: demoapp2
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ custom_nodeport2 }}"
            target_type: http
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True

        - name: Create Proxy Configuration and Certificate for Demoapp3
          include_role:
            name: proxy
          vars:
            operation: create_site
            service_name: demoapp3
            jumphost_external_ip: "{{ inventory_hostname }}"
            proxy_destination: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
            node_port: "{{ custom_nodeport3 }}"
            target_type: http
          when:
            - site_deploy_kubernetes == True
            - site_deploy_jumphost == True
      when:
        - create_proxy_configurations == True

# #####################################################################
# Deploy PostgreSQL database for Deep Security
# #####################################################################
- name: Create PostgreSQL database for Deep Security
  hosts: tag_role_dsm_db
  become: true

  vars:
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy PostgreSQL
      include_role:
        name: postgresql
      vars:
        operation: deploy
        database_client: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsm'][0] }}"
      when: site_deploy_deepsecurity == True

    - name: Create Database for Deep Security in PostgreSQL
      include_role:
        name: postgresql
      vars:
        operation: create_database
        database_name: "{{ deepsecurity_database_name }}"
        database_user: "{{ deepsecurity_database_user }}"
        database_password: "{{ deepsecurity_database_password }}"
        database_role_attr_flags: "{{ deepsecurity_database_role_attr_flags }}"
        database_priv: "{{ deepsecurity_database_priv }}"
      when:
        - site_deploy_deepsecurity == True
        - deepsecurity_variant == 'dsm'

# #####################################################################
# Deploy Deep Security
# #####################################################################
- name: Deploy Deep Security
  hosts: tag_role_dsm
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Deep Security
      include_role:
        name: deepsecurity
      vars:
        operation: deploy
        addressandportsscreen_manageraddress: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsm'][0] }}"
        licensescreen_license: '{{ deepsecurity_license }}'
        databasescreen_hostname: "{{ hostvars[inventory_hostname]['groups']['tag_role_dsm_db'][0] }}"
        databasescreen_databasename: "{{ deepsecurity_database_name }}"
        databasescreen_username: "{{ deepsecurity_database_user }}"
        databasescreen_password: "{{ deepsecurity_database_password }}"
        credentialsscreen_administrator_username: "{{ deepsecurity_administrator_username }}"
        credentialsscreen_administrator_password: "{{ deepsecurity_administrator_password }}"
        dsm_download_url: "{{ deepsecurity_download_url }}"
        dsm_installer: "{{ deepsecurity_installer }}"
      when:
        - site_deploy_deepsecurity == True
        - deepsecurity_variant == 'dsm'

# #####################################################################
# Deploy Kubernetes cluster with kubeadm
# #####################################################################
- name: Create Kubernetes cluster with kubeadm
  hosts: tag_role_k8smaster
  become: true
  # Container Runtime Sockets:
  # /var/run/crio/crio.sock       unix:///var/run/crio/crio.sock
  # /var/run/dockershim.sock      unix:///var/run/dockershim.sock
  vars:
    operation: create_master
    node_ip: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
    apiserver_advertise_address: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
    apiserver_cert_extra_sans: "{{ hostvars[inventory_hostname]['groups']['tag_role_k8smaster'][0] }}"
    kubeadm_container_runtime_socket: /var/run/dockershim.sock
    cgroupdriver: systemd
    deploy_golang: no
    deploy_runc: no
    deploy_cni: no
    deploy_crio: no
    deploy_docker: yes
    deploy_kubernetes: yes
    deploy_pod_network: yes
    deploy_helm: yes
    deploy_rook_ceph: yes

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Kubernetes master with Docker & Cri-O
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/crio/crio.sock
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'crio'

    - name: Deploy Kubernetes master with Docker
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/dockershim.sock
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'docker'

- name: Deploy Kubernetes workers
  hosts: tag_role_k8sworker
  become: true

  vars:
    operation: create_workers
    node_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    cgroupdriver: systemd
    deploy_kubernetes: yes

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Kubernetes worker with Cri-O
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/crio/crio.sock
        deploy_golang: yes
        deploy_runc: yes
        deploy_cni: yes
        deploy_crio: yes
        deploy_docker: no
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'crio'

    - name: Deploy Kubernetes worker with Docker
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/dockershim.sock
        deploy_golang: no
        deploy_runc: no
        deploy_cni: no
        deploy_crio: no
        deploy_docker: yes
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'docker'

- name: Deploy Basic Services for Kubernetes
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Helm
      include_role:
        name: helm
      vars:
        operation: deploy
      when: site_deploy_kubernetes == True

    - name: Deploy Rook-Ceph
      include_role:
        name: rook
      vars:
        operation: deploy
      when: site_deploy_kubernetes == True

    - name: Check if Count of Started OSD Pods equals Worker Count
      become: true
      become_user: ubuntu
      shell: if [ $(kubectl -n rook-ceph get pods | grep -c "osd\-[0-9]\-.*Running") -eq {{ kubernetes_worker_count }} ] ; then exit 0 ; else exit 1 ; fi
      register: grep_result
      until: grep_result.rc == 0
      retries: 300
      delay: 10
      ignore_errors: yes
      when: site_deploy_kubernetes == True

    - name: Create Rook-Ceph Link Document
      include_role:
        name: rook
      vars:
        operation: link_document
      when: site_deploy_kubernetes == True

    - name: Create k8s Certificate
      include_role:
        name: kubernetes-kubeadmin
      vars:
        operation: k8s_create_certificate
      when: site_deploy_kubernetes == True

    - name: Deploy Docker Registry
      include_role:
        name: registry
      vars:
        operation: deploy
      when:
        - site_deploy_kubernetes == True

    - name: Deploy LoadBalancer
      include_role:
        name: loadbalancer
      vars:
        operation: deploy
      when:
        - site_deploy_kubernetes == True

    - name: Configure LoadBalancer
      include_role:
        name: loadbalancer
      vars:
        operation: configure
      when:
        - site_deploy_kubernetes == True

    # Not required anymore
    # - name: Create k8s certificate pod
    #   include_role:
    #     name: kubernetes-kubeadmin
    #   vars:
    #     operation: k8s_create_certificate_pod
    #   when: site_deploy_kubernetes == True

# #####################################################################
# Deploy OPA
# #####################################################################
- name: Deploy OPA
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy OPA
      include_role:
        name: opa
      vars:
        operation: deploy
      when:
        - site_deploy_opa == True
        - site_deploy_kubernetes == True

    - name: Deploy OPA Testcases
      include_role:
        name: opa
      vars:
        operation: testcases
      when:
        - site_deploy_opa == True
        - site_deploy_kubernetes == True

# #####################################################################
# Deploy Prometheus
# #####################################################################
- name: Deploy Prometheus
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Prometheus
      include_role:
        name: prometheus
      vars:
        operation: deploy
      when:
        - site_deploy_prometheus == True
        - site_deploy_kubernetes == True

# #####################################################################
# Deploy Grafana
# #####################################################################
- name: Deploy Grafana
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Grafana
      include_role:
        name: grafana
      vars:
        operation: deploy
      when:
        - site_deploy_grafana == True
        - site_deploy_kubernetes == True

# #####################################################################
# Deploy Deep Security Smart Check
# #####################################################################
- name: Deploy Smart Check
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Smart Check
      include_role:
        name: smartcheck
      vars:
        operation: deploy
        activationCode: "{{ smartcheck_license }}"
        auth_masterPassword: trendmicro
      when:
        - site_deploy_smartcheck == True
        - site_deploy_kubernetes == True

    - name: Configure Smart Check
      include_role:
        name: smartcheck
      vars:
        operation: configure
      when:
        - site_deploy_smartcheck == True
        - site_deploy_kubernetes == True

# #####################################################################
# Deploy Jenkins
# #####################################################################
- name: Deploy Jenkins
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Jenkins
      include_role:
        name: jenkins
      vars:
        operation: deploy
      when:
        - site_deploy_jenkins == True
        - site_deploy_kubernetes == True

    # The following task creates a Jenkins JNLP Slave Docker Image
    # Currently the only problem is that k8s makes problems pulling the image
    # from the internal registry. For now, Jenkins is configured to pull the
    # image from my Docker Hub account
    # - name: Deploy Jenkins JNLP Slave Docker Image
    #   include_role:
    #     name: jenkins
    #   vars:
    #     operation: create_slave
    #   when:
    #     - site_deploy_jenkins == True
    #     - site_deploy_kubernetes == True

# #####################################################################
# Deploy GitLab
# #####################################################################
- name: Deploy GitLab
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy GitLab
      include_role:
        name: gitlab
      vars:
        operation: deploy
      when:
        - site_deploy_gitlab == True
        - site_deploy_kubernetes == True

# #####################################################################
# Deploy Linkerd
# #####################################################################
- name: Deploy Linkerd
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Linkerd
      include_role:
        name: linkerd
      vars:
        operation: deploy
      when:
        - site_deploy_linkerd == True
        - site_deploy_kubernetes == True

# #####################################################################
# Deploy OpenShift
# #####################################################################
- name: Deploy OpenShift
  hosts: tag_role_openshift
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    # - name: Create Proxy instance
    #   include_role:
    #     name: proxy
    #   vars:
    #     operation: deploy
    #   when:
    #     - site_deploy_openshift == True
    #     - site_deploy_jumphost == True

    - name: Deploy CodeReady Containers
      include_role:
        name: openshift
      vars:
        operation: deploy
      when:
        - site_deploy_openshift == True
        - site_deploy_jumphost == True

# # #####################################################################
# # Deploy OPA
# # #####################################################################
# - name: Deploy OPA
#   hosts: tag_role_k8smaster
#   become: true
#
#   tasks:
#     - name: Include vars
#       include: site_vars.yml
#
#     - name: pause
#       pause:
#         minutes: 3
#
#     - name: Deploy OPA
#       include_role:
#         name: opa
#       vars:
#         operation: deploy
#       when:
#         - site_deploy_opa == True
#         - site_deploy_kubernetes == True

# #####################################################################
# Print some environment information
# #####################################################################
- hosts: localhost
  tasks:
    - name: Kubernetes Details
      command: cat "site_{{ type }}/kubernetes.txt"
      register: details_kubernetes
      when:
        - site_deploy_kubernetes == True

    - name: Ceph Details
      command: cat "site_{{ type }}/ceph.txt"
      register: details_ceph
      when:
        - site_deploy_kubernetes == True

    - name: Cluster Registry Details
      command: cat "site_{{ type }}/registry.txt"
      register: details_registry
      when:
        - site_deploy_kubernetes == True

    - name: Grafana Details
      command: cat "site_{{ type }}/grafana.txt"
      register: details_grafana
      when:
        - site_deploy_grafana == True
        - site_deploy_kubernetes == True

    - name: Jenkins Details
      command: cat "site_{{ type }}/jenkins.txt"
      register: details_jenkins
      when:
        - site_deploy_jenkins == True
        - site_deploy_kubernetes == True

    - name: GitLab Details
      command: cat "site_{{ type }}/gitlab.txt"
      register: details_gitlab
      when:
        - site_deploy_gitlab == True
        - site_deploy_kubernetes == True

    - name: Smart Check Details
      command: cat "site_{{ type }}/smartcheck.txt"
      register: details_smartcheck
      when:
        - site_deploy_smartcheck == True
        - site_deploy_kubernetes == True

    - name: Deep Security Details
      command: cat "site_{{ type }}/deepsecurity.txt"
      register: details_deepsecurity
      when:
        - site_deploy_deepsecurity == True
        - deepsecurity_variant == 'dsm'

    - name: Kubernetes Details
      debug:
        msg:
          - "{{ details_kubernetes.stdout_lines }}"
      when:
        - site_deploy_kubernetes == True

    - name: Ceph Details
      debug:
        msg:
          - "{{ details_ceph.stdout_lines }}"
      when:
        - site_deploy_kubernetes == True

    - name: Cluster Registry Details
      debug:
        msg: "{{ details_registry.stdout_lines }}"
      when:
        - site_deploy_kubernetes == True

    - name: Grafana Details
      debug:
        msg: "{{ details_grafana.stdout_lines }}"
      when:
        - site_deploy_grafana == True
        - site_deploy_kubernetes == True

    - name: Jenkins Details
      debug:
        msg: "{{ details_jenkins.stdout_lines }}"
      when:
        - site_deploy_jenkins == True
        - site_deploy_kubernetes == True

    - name: GitLab Details
      debug:
        msg: "{{ details_gitlab.stdout_lines }}"
      when:
        - site_deploy_gitlab == True
        - site_deploy_kubernetes == True

    - name: Smart Check Details
      debug:
        msg: "{{ details_smartcheck.stdout_lines }}"
      when:
        - site_deploy_smartcheck == True
        - site_deploy_kubernetes == True

    - name: Deep Security Details
      debug:
        msg:
          - "{{ details_deepsecurity.stdout_lines }}"
      when:
        - site_deploy_deepsecurity == True
        - deepsecurity_variant == 'dsm'
