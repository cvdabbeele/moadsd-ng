---
# #####################################################################
# Deploy MOADSD-NG Environment
# #####################################################################

# #####################################################################
# Store some private ips within the ansible hostvars
# #####################################################################
- hosts: tag_role_jumphost
  tasks:
    - name: Get ipaddr of jumphost
      set_fact:
        remote_ip: "{{ inventory_hostname | ipaddr}}"

    - name: Get ipaddr of jumphost
      set_fact:
        remote_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      when: not remote_ip

    - name: Store external ip address of jumphost
      add_host:
        name: "{{ remote_ip }}"
        groups: "moadsd_ng_jumphost_instance_public"

- hosts: tag_role_k8smaster
  tasks:
    - name: Get internal ip address of kubernetes master
      add_host:
        name: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        groups: "moadsd_ng_k8smaster_instance"

- hosts: tag_role_dsm
  tasks:
    - name: Get internal ip address of deep security
      add_host:
        name: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        groups: "moadsd_ng_dsm_instance"

- hosts: tag_role_dsm_db
  tasks:
    - name: Get internal ip address of postgresql
      add_host:
        name: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        groups: "moadsd_ng_postgresql_instance"

- hosts: localhost
  gather_facts: no
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Listing environment
      debug:
        msg:
          - "Jumphost                     : {{ groups['moadsd_ng_jumphost_instance_public'][0] }}"
      when: site_deploy_jumphost == True

    - name: Listing environment
      debug:
        msg:
          - "Kubernetes Master            : {{ groups['moadsd_ng_k8smaster_instance'][0] }}"
      when: site_deploy_kubernetes == True

    - name: Listing environment
      debug:
        msg:
          - "Deep Security                : {{ groups['moadsd_ng_dsm_instance'][0] }}"
          - "PostgreSQL                   : {{ groups['moadsd_ng_postgresql_instance'][0] }}"
      when: site_deploy_deepsecurity == True

# #####################################################################
# Create http & https Proxy with Trusted Certificates
# #####################################################################
- name: Create and Configure Jumphost Proxy
  hosts: tag_role_jumphost
  become: true

  vars:
    trusted_certificates: False

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Create Proxy instance
      include_role:
        name: proxy
      vars:
        operation: create_instance
      when: site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for Deep Security Manager
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: deepsecurity
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_dsm_instance'][0] }}"
        node_port: "{{ addressandportsscreen_managerport }}"
        target_type: https
      when:
        - site_deploy_deepsecurity == True
        - site_deploy_jumphost == True

    # - name: Create Proxy Configuration and Certificate for Deep Security Heartbeat
    #   include_role:
    #     name: proxy
    #   vars:
    #     operation: create_site
    #     service_name: heartbeat
    #     jumphost_external_ip: "{{ inventory_hostname }}"
    #     k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
    #     node_port: "{{ addressandportsscreen_heartbeatport }}"
    #     target_type: https
    #   when:
    #     - site_deploy_deepsecurity == True
    #     - site_deploy_jumphost == True
    #
    # - name: Create Proxy Configuration and Certificate for Deep Security Agent
    #   include_role:
    #     name: proxy
    #   vars:
    #     operation: create_site
    #     service_name: agent
    #     jumphost_external_ip: "{{ inventory_hostname }}"
    #     k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
    #     node_port: "{{ addressandportsscreen_agentport }}"
    #     target_type: https
    #   when:
    #     - site_deploy_deepsecurity == True
    #     - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for the Dashboard
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: dashboard
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ kubernetes_dashboard_nodeport }}"
        target_type: https
      when:
        - site_deploy_kubernetes == True
        - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for the Registry
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: registry
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ registry_nodeport }}"
        target_type: https
      when:
        - site_deploy_registry == True
        - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for Smart Check
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: smartcheck
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ smartcheck_nodeport }}"
        target_type: https
      when:
        - site_deploy_smartcheck == True
        - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for Jenkins
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: jenkins
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ jenkins_nodeport }}"
        target_type: http
      when:
        - site_deploy_jenkins == True
        - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for GitLab
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: jenkins
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ gitlab_noodeport_https }}"
        target_type: https
      when:
        - site_deploy_gitlab == True
        - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for Linkerd
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: linkerd
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ linkerd_dashboard_nodeport }}"
        target_type: http
      when:
        - site_deploy_linkerd == True
        - site_deploy_jumphost == True

    - name: Create Proxy Configuration and Certificate for Demoapp
      include_role:
        name: proxy
      vars:
        operation: create_site
        service_name: demoapp
        jumphost_external_ip: "{{ inventory_hostname }}"
        k8smaster_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
        node_port: "{{ custom_nodeport }}"
        target_type: http
      when:
        - site_deploy_jumphost == True

# #####################################################################
# Deploy PostgreSQL database for Deep Security
# #####################################################################
- name: Create PostgreSQL database for Deep Security
  hosts: tag_role_dsm_db
  become: true

  vars:
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy PostgreSQL
      include_role:
        name: postgresql
      vars:
        operation: create_instance
        database_client: "{{ groups['moadsd_ng_dsm_instance'][0] }}"
      when: site_deploy_deepsecurity == True

    - name: Create Database for Deep Security in PostgreSQL
      include_role:
        name: postgresql
      vars:
        operation: create_database
        database_name: "{{ deepsecurity_database_name }}"
        database_user: "{{ deepsecurity_database_user }}"
        database_password: "{{ deepsecurity_database_password }}"
        database_role_attr_flags: "{{ deepsecurity_database_role_attr_flags }}"
        database_priv: "{{ deepsecurity_database_priv }}"
      when: site_deploy_deepsecurity == True

# #####################################################################
# Deploy Deep Security
# #####################################################################
- name: Deploy Deep Security
  hosts: tag_role_dsm
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    # !! "{{ groups['postgresql'] }}" holds the internal network ip of the postgresql !!
    # !! "{{ groups['dsm'] }}" holds the internal network ip of deep security !!
    - name: Deploy Deep Security
      include_role:
        name: deepsecurity
      vars:
        operation: create_instance
        addressandportsscreen_manageraddress: "{{ groups['moadsd_ng_dsm_instance'][0] }}"
        licensescreen_license: '{{ deepsecurity_license }}'
        databasescreen_hostname: "{{ groups['moadsd_ng_postgresql_instance'][0] }}"
        databasescreen_databasename: "{{ deepsecurity_database_name }}"
        databasescreen_username: "{{ deepsecurity_database_user }}"
        databasescreen_password: "{{ deepsecurity_database_password }}"
        credentialsscreen_administrator_username: "{{ deepsecurity_administrator_username }}"
        credentialsscreen_administrator_password: "{{ deepsecurity_administrator_password }}"
        dsm_download_url: "{{ deepsecurity_download_url }}"
        dsm_installer: "{{ deepsecurity_installer }}"
      when: site_deploy_deepsecurity == True

# #####################################################################
# Deploy Kubernetes cluster with kubeadm
# #####################################################################
- name: Create Kubernetes cluster with kubeadm
  hosts: tag_role_k8smaster
  become: true
  # Container Runtime Sockets:
  # /var/run/crio/crio.sock       unix:///var/run/crio/crio.sock
  # /var/run/dockershim.sock      unix:///var/run/dockershim.sock
  vars:
    operation: create_master
    node_ip: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
    apiserver_advertise_address: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
    apiserver_cert_extra_sans: "{{ groups['moadsd_ng_k8smaster_instance'][0] }}"
    kubeadm_container_runtime_socket: /var/run/dockershim.sock
    cgroupdriver: systemd
    deploy_golang: no
    deploy_runc: no
    deploy_cni: no
    deploy_crio: no
    deploy_docker: yes
    deploy_kubernetes: yes
    deploy_pod_network: yes
    deploy_helm: yes
    deploy_rook_ceph: yes

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Kubernetes master with Docker & Cri-O
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/crio/crio.sock
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'crio'

    - name: Deploy Kubernetes master with Docker
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/dockershim.sock
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'docker'

- name: Deploy Kubernetes workers
  hosts: tag_role_k8sworker
  become: true

  vars:
    operation: create_workers
    node_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    cgroupdriver: systemd
    deploy_kubernetes: yes

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: debug
      debug:
        msg: "{{ ansible_ssh_common_args }}"

    - name: Deploy Kubernetes worker with Cri-O
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/crio/crio.sock
        deploy_golang: yes
        deploy_runc: yes
        deploy_cni: yes
        deploy_crio: yes
        deploy_docker: no
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'crio'

    - name: Deploy Kubernetes worker with Docker
      include_role:
        name: kubernetes-kubeadmin
      vars:
        kubelet_container_runtime_socket: /var/run/dockershim.sock
        deploy_golang: no
        deploy_runc: no
        deploy_cni: no
        deploy_crio: no
        deploy_docker: yes
      when:
        - site_deploy_kubernetes == True
        - kubernetes_container_runtime == 'docker'

- name: Wait for Rook-Ceph to initialize and create ssl certificate pod and cluster registry
  hosts: tag_role_k8smaster
  become: true
  become_user: ubuntu

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Check if count of started OSD pods equals worker count
      shell: if [ $(kubectl -n rook-ceph get pods | grep -c "\-[0-9]\-.*Running") -eq {{ kubernetes_worker_count }} ] ; then exit 0 ; else exit 1 ; fi
      register: grep_result
      until: grep_result.rc == 0
      retries: 60
      delay: 10
      ignore_errors: yes
      when: site_deploy_kubernetes == True

    - name: Create k8s certificate
      include_role:
        name: kubernetes-kubeadmin
      vars:
        operation: k8s_create_certificate
      when: site_deploy_kubernetes == True

    - name: Deploy Docker Registry
      include_role:
        name: registry
      vars:
        operation: create_instance
      when:
        - site_deploy_registry == True
        - site_deploy_kubernetes == True

    # - name: Create k8s certificate pod
    #   include_role:
    #     name: kubernetes-kubeadmin
    #   vars:
    #     operation: k8s_create_certificate_pod
    #   when: site_deploy_kubernetes == True

# #####################################################################
# Deploy Deep Security Smart Check
# #####################################################################
- name: Deploy Deep Security Smart Check
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Deep Security Smart Check
      include_role:
        name: smartcheck
      vars:
        operation: create_instance
        activationCode: "{{ smartcheck_license }}"
        auth_masterPassword: trendmicro
      when: site_deploy_smartcheck == True

    - name: Enable pre-registry scanning for Deep Security Smart Check
      include_role:
        name: smartcheck
      vars:
        operation: enable_pre_reg_scanning
      when: site_deploy_smartcheck == True

    - name: Configure Deep Security Smart Check
      include_role:
        name: smartcheck
      vars:
        operation: configure
      when: site_deploy_smartcheck == True

# #####################################################################
# Deploy Jenkins
# #####################################################################
- name: Deploy Jenkins
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Jenkins
      include_role:
        name: jenkins
      vars:
        operation: create_instance
      when: site_deploy_jenkins == True

# #####################################################################
# Deploy GitLab
# #####################################################################
- name: Deploy GitLab
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy GitLab
      include_role:
        name: gitlab
      vars:
        operation: create_instance
      when: site_deploy_gitlab == True

# #####################################################################
# Deploy GitLab on Docker
# #####################################################################
- name: Deploy GitLab
  hosts: tag_role_gitlab
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy GitLab
      include_role:
        name: gitlab
      vars:
        operation: create_instance_docker
        cgroupdriver: cgroupfs
      when: site_deploy_gitlab_docker == True

# #####################################################################
# Deploy Linkerd
# #####################################################################
- name: Deploy Linkerd
  hosts: tag_role_k8smaster
  become: true

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Deploy Linkerd
      include_role:
        name: linkerd
      vars:
        operation: create_instance
      when: site_deploy_linkerd == True

# #####################################################################
# Patch Docker to allow insecure registries and docker.sock for all
# local users. Only when k8s runtime is docker.
# #####################################################################
- hosts: tag_role_k8smaster, tag_role_k8sworker
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Change Docker Socket Permissions
      become: true
      file:
        path: /var/run/docker.sock
        mode: '666'

    - name: Docker restart
      become: true
      command: systemctl reload docker

# #####################################################################
# Print some environment information
# #####################################################################
- hosts: localhost
  tasks:
    - name: Jenkins Details
      command: cat "site_{{ type }}/jenkins.txt"
      register: details_jenkins
      ignore_errors: yes

    - name: Smart Check Details
      command: cat "site_{{ type }}/smartcheck.txt"
      register: details_smartcheck
      ignore_errors: yes

    - name: Cluster Registry Details
      command: cat "site_{{ type }}/registry.txt"
      register: details_registry
      ignore_errors: yes

    - name: Deep Security Details
      command: cat "site_{{ type }}/deepsecurity.txt"
      register: details_deepsecurity
      ignore_errors: yes

    - name: Kubernetes Details
      command: cat "site_{{ type }}/kubernetes.txt"
      register: details_kubernetes
      ignore_errors: yes

    - name: Kubernetes Details
      debug:
        msg:
          - "{{ details_kubernetes.stdout_lines }}"

    - name: Cluster Registry Details
      debug:
        msg: "{{ details_registry.stdout_lines }}"

    - name: Jenkins Details
      debug:
        msg: "{{ details_jenkins.stdout_lines }}"

    - name: Smart Check Details
      debug:
        msg: "{{ details_smartcheck.stdout_lines }}"

    - name: Deep Security Details
      debug:
        msg:
          - "{{ details_deepsecurity.stdout_lines }}"
