- hosts: tag_role_jumphost:&tag_user_{{ user }}
  gather_facts: false
  tasks:
    - name: Get ipaddr of jumphost
      set_fact:
        remote_ip: "{{ inventory_hostname | ipaddr}}"

    - name: Get ipaddr of jumphost
      set_fact:
        remote_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      when: not remote_ip

    - name: Store external ip address of jumphost
      add_host:
        name: "{{ remote_ip }}"
        groups: "moadsd_ng_jumphost_instance_public"

- hosts: tag_role_jumphost:&tag_user_{{ user }}, tag_role_k8sworker:&tag_user_{{ user }}, tag_role_k8smaster:&tag_user_{{ user }}, tag_role_linuxep:&tag_user_{{ user }}
  gather_facts: false
  become: yes

  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: AWS
      block:
        - name: Query Instance State
          set_fact:
            ec2_state: "{{ hostvars[inventory_hostname]['ec2_state'] }}"

        - name: Cancel Shutdown on Linux Instance
          at:
            command: shutdown -h now
            state: absent
          when:
            - ec2_state == "running"
      when: type == "aws"

- hosts: tag_role_jumphost:&tag_user_{{ user }}, tag_role_k8sworker:&tag_user_{{ user }}, tag_role_k8smaster:&tag_user_{{ user }}, tag_role_linuxep:&tag_user_{{ user }}, tag_role_windowsep:&tag_user_{{ user }}, tag_role_openshift:&tag_user_{{ user }}, tag_role_dsm:&tag_user_{{ user }}, tag_rols_dsmdb:&tag_user_{{ user }}
  gather_facts: false
  vars:
  tasks:
    - name: Include vars
      include: site_vars.yml

    - name: Stop instance
      include_role:
        name: environment-gcp
      vars:
        operation: stop_instance
        instance_name: "{{ hostvars[inventory_hostname]['name'] }}"
      when: type == 'gcp'

    - name: Stop instance
      include_role:
        name: environment-aws
      vars:
        operation: stop_instance
        instance_id: "{{ hostvars[inventory_hostname]['ec2_id'] }}"
      when: type == 'aws'

    - name: Stop instance
      debug:
        msg: "not yet implemented"
      # include_role:
      #   name: environment-azure
      # vars:
      #   operation: stop_instance
      when: type == 'azure'
