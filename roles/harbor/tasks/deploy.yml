---
# #####################################################################
# Create a Harbor instance
# #####################################################################
- name: Generate DNS Name for Harbor
  set_fact:
    service_dns_name: "https://harbor-{{ jumphost_ip | regex_replace('\\.', '-') }}.{{ jumphost_tld }}"

- name: Create Harbor Overrides File
  copy:
    dest: /home/ubuntu/overrides-harbor.yml
    mode: 0640
    owner: ubuntu
    content: |
      expose:
        # Set the way how to expose the service. Set the type as "ingress",
        # "clusterIP", "nodePort" or "loadBalancer" and fill the information
        # in the corresponding section
        type: {{ service_type }}
        tls:
          commonName: {{ service_dns_name }}
        nodePort:
          # The name of NodePort service
          name: harbor
          ports:
            http:
              # The service port Harbor listens on when serving with HTTP
              port: 80
              # The node port Harbor listens on when serving with HTTP
              nodePort: {{ harbor_nodeport_http }}
            https:
              # The service port Harbor listens on when serving with HTTPS
              port: 443
              # The node port Harbor listens on when serving with HTTPS
              nodePort: {{ harbor_nodeport_https }}
            # Only needed when notary.enabled is set to true
            notary:
              # The service port Notary listens on
              port: 4443
              # The node port Notary listens on
              nodePort: {{ harbor_nodeport_notary }}

      # The external URL for Harbor core service. It is used to
      # 1) populate the docker/helm commands showed on portal
      # 2) populate the token service URL returned to docker/notary client
      #
      # If Harbor is deployed behind the proxy, set it as the URL of proxy
      externalURL: {{ service_dns_name }}

      # The persistence is enabled by default and a default StorageClass
      # is needed in the k8s cluster to provision volumes dynamicly.
      # Specify another StorageClass in the "storageClass" or set "existingClaim"
      # if you have already existing persistent volumes to use
      #
      # For storing images and charts, you can also use "azure", "gcs", "s3",
      # "swift" or "oss". Set it in the "imageChartStorage" section
      persistence:
        enabled: true
        # Setting it to "keep" to avoid removing PVCs during a helm delete
        # operation. Leaving it empty will delete PVCs after the chart deleted
        resourcePolicy: "keep"
        persistentVolumeClaim:
          registry:
            accessMode: ReadWriteOnce
            size: 5Gi
          chartmuseum:
            accessMode: ReadWriteOnce
            size: 5Gi
          jobservice:
            accessMode: ReadWriteOnce
            size: 1Gi
          # If external database is used, the following settings for database will
          # be ignored
          database:
            accessMode: ReadWriteOnce
            size: 1Gi
          # If external Redis is used, the following settings for Redis will
          # be ignored
          redis:
            accessMode: ReadWriteOnce
            size: 1Gi
          trivy:
            accessMode: ReadWriteOnce
            size: 5Gi

      # debug, info, warning, error or fatal
      logLevel: info

      # The initial password of Harbor admin. Change it from portal after launching Harbor
      harborAdminPassword: {{ harbor_password }}
      # The secret key used for encryption. Must be a string of 16 chars.
      secretKey: {{ harbor_secret_key }}

      registry:
        # set the service account to be used, default if left empty
        serviceAccountName: ""
        registry:
          image:
            repository: goharbor/registry-photon
            tag: v2.0.2
          # resources:
          #  requests:
          #    memory: 256Mi
          #    cpu: 100m
        controller:
          image:
            repository: goharbor/harbor-registryctl
            tag: v2.0.2

          # resources:
          #  requests:
          #    memory: 256Mi
          #    cpu: 100m
        # set the service account to be used, default if left empty
        serviceAccountName: ""
        replicas: 1
        nodeSelector: {}
        tolerations: []
        affinity: {}
        ## Additional deployment annotations
        podAnnotations: {}
        # Secret is used to secure the upload state from client
        # and registry storage backend.
        # See: https://github.com/docker/distribution/blob/master/docs/configuration.md#http
        # If a secret key is not specified, Helm will generate one.
        # Must be a string of 16 chars.
        secret: ""
        # If true, the registry returns relative URLs in Location headers. The client is responsible for resolving the correct URL.
        relativeurls: false
        credentials:
          username: {{ harbor_registry_user }}
          password: {{ harbor_registry_password }}
          # If you update the username or password of registry, make sure use cli tool htpasswd to generate the bcrypt hash
          # e.g. "htpasswd -nbBC10 $username $password"
          htpasswd: {{ harbor_registry_htpasswd }}

      clair:
        enabled: true
        # set the service account to be used, default if left empty
        serviceAccountName: ""
        clair:
          image:
            repository: goharbor/clair-photon
            tag: v2.0.2
          # resources:
          #  requests:
          #    memory: 256Mi
          #    cpu: 100m
        adapter:
          image:
            repository: goharbor/clair-adapter-photon
            tag: v2.0.2
          # resources:
          #  requests:
          #    memory: 256Mi
          #    cpu: 100m
        replicas: 1
        # The interval of clair updaters, the unit is hour, set to 0 to
        # disable the updaters
        updatersInterval: 12
        nodeSelector: {}
        tolerations: []
        affinity: {}
        ## Additional deployment annotations
        podAnnotations: {}

      trivy:
        # enabled the flag to enable Trivy scanner
        enabled: true
        image:
          # repository the repository for Trivy adapter image
          repository: goharbor/trivy-adapter-photon
          # tag the tag for Trivy adapter image
          tag: v2.0.2
        # set the service account to be used, default if left empty
        serviceAccountName: ""
        # replicas the number of Pod replicas
        replicas: 1
        # debugMode the flag to enable Trivy debug mode with more verbose scanning log
        debugMode: false
        # vulnType a comma-separated list of vulnerability types. Possible values are `os` and `library`.
        vulnType: "os,library"
        # severity a comma-separated list of severities to be checked
        severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
        # ignoreUnfixed the flag to display only fixed vulnerabilities
        ignoreUnfixed: false
        # insecure the flag to skip verifying registry certificate
        insecure: false
        # gitHubToken the GitHub access token to download Trivy DB
        #
        # Trivy DB contains vulnerability information from NVD, Red Hat, and many other upstream vulnerability databases.
        # It is downloaded by Trivy from the GitHub release page https://github.com/aquasecurity/trivy-db/releases and cached
        # in the local file system (`/home/scanner/.cache/trivy/db/trivy.db`). In addition, the database contains the update
        # timestamp so Trivy can detect whether it should download a newer version from the Internet or use the cached one.
        # Currently, the database is updated every 12 hours and published as a new release to GitHub.
        #
        # Anonymous downloads from GitHub are subject to the limit of 60 requests per hour. Normally such rate limit is enough
        # for production operations. If, for any reason, it's not enough, you could increase the rate limit to 5000
        # requests per hour by specifying the GitHub access token. For more details on GitHub rate limiting please consult
        # https://developer.github.com/v3/#rate-limiting
        #
        # You can create a GitHub token by following the instructions in
        # https://help.github.com/en/github/authenticating-to-github/creating-a-personal-access-token-for-the-command-line
        gitHubToken: ""
        # skipUpdate the flag to disable Trivy DB downloads from GitHub
        #
        # You might want to set the value of this flag to `true` in test or CI/CD environments to avoid GitHub rate limiting issues.
        # If the value is set to `true` you have to manually download the `trivy.db` file and mount it in the
        # `/home/scanner/.cache/trivy/db/trivy.db` path.
        skipUpdate: false
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1
            memory: 1Gi
        ## Additional deployment annotations
        podAnnotations: {}

      database:
        # if external database is used, set "type" to "external"
        # and fill the connection informations in "external" section
        type: internal
        internal:
          # set the service account to be used, default if left empty
          serviceAccountName: ""
          image:
            repository: goharbor/harbor-db
            tag: v2.0.2
          # The initial superuser password for internal database
          password: "changeit"
          # resources:
          #  requests:
          #    memory: 256Mi
          #    cpu: 100m
          nodeSelector: {}
          tolerations: []
          affinity: {}
        external:
          host: "192.168.0.1"
          port: "5432"
          username: "user"
          password: "password"
          coreDatabase: "registry"
          clairDatabase: "clair"
          notaryServerDatabase: "notary_server"
          notarySignerDatabase: "notary_signer"
          # "disable" - No SSL
          # "require" - Always SSL (skip verification)
          # "verify-ca" - Always SSL (verify that the certificate presented by the
          # server was signed by a trusted CA)
          # "verify-full" - Always SSL (verify that the certification presented by the
          # server was signed by a trusted CA and the server host name matches the one
          # in the certificate)
          sslmode: "disable"
        # The maximum number of connections in the idle connection pool.
        # If it <=0, no idle connections are retained.
        maxIdleConns: 50
        # The maximum number of open connections to the database.
        # If it <= 0, then there is no limit on the number of open connections.
        # Note: the default number of connections is 1024 for postgre of harbor.
        maxOpenConns: 1000
        ## Additional deployment annotations
        podAnnotations: {}

      redis:
        # if external Redis is used, set "type" to "external"
        # and fill the connection informations in "external" section
        type: internal
        internal:
          # set the service account to be used, default if left empty
          serviceAccountName: ""
          image:
            repository: goharbor/redis-photon
            tag: v2.0.2
          # resources:
          #  requests:
          #    memory: 256Mi
          #    cpu: 100m
          nodeSelector: {}
          tolerations: []
          affinity: {}
        external:
          host: "192.168.0.2"
          port: "6379"
          # The "coreDatabaseIndex" must be "0" as the library Harbor
          # used doesn't support configuring it
          coreDatabaseIndex: "0"
          jobserviceDatabaseIndex: "1"
          registryDatabaseIndex: "2"
          chartmuseumDatabaseIndex: "3"
          clairAdapterIndex: "4"
          trivyAdapterIndex: "5"
          password: ""
        ## Additional deployment annotations
        podAnnotations: {}

- name: Create Harbor Namespace
  become: true
  become_user: ubuntu
  shell: kubectl create namespace {{ harbor_namespace }} --dry-run=true -o yaml | kubectl apply -f -
  args:
    chdir: $HOME

- name: Install Harbor Repo
  become: true
  become_user: ubuntu
  shell: helm repo add harbor https://helm.goharbor.io

- name: Update Harbor Repo
  become: true
  become_user: ubuntu
  shell: helm repo update

- name: Install Harbor
  become: true
  become_user: ubuntu
  shell: helm install --namespace {{ harbor_namespace }} --values overrides-harbor.yml {{ harbor_name }} {{ harbor_chart }} >> harbor.log
  args:
    chdir: $HOME
    creates: harbor.log

- name: Fetch harbor.log
  become: true
  become_user: ubuntu
  fetch:
    src: /home/ubuntu/harbor.log
    dest: ./site_{{ type }}/
    flat: yes

- name: Store Harbor credentials
  become: true
  become_user: ubuntu
  copy:
    dest: /home/ubuntu/harbor.txt
    mode: 0640
    content: |
      URL: https://{{ inventory_hostname }}:{{ harbor_nodeport_https }}
      URL: {{ service_dns_name }}
      Username: {{ harbor_username }}
      Password: {{ harbor_password }}

- name: Fetch harbor.txt
  become: true
  become_user: ubuntu
  fetch:
    src: /home/ubuntu/harbor.txt
    dest: ./site_{{ type }}/
    flat: yes
