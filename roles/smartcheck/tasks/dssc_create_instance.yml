---
# #####################################################################
# Create a Deep Security Smart Check instance
# #####################################################################
- name: Create Deep Security Smart Check overrides file
  copy:
    dest: /home/ubuntu/overrides-smartcheck.yml
    mode: 0640
    owner: ubuntu
    content: |
      service:
        type: {{ service_type }}
      networkPolicy:
        additionalRegistryPorts:
          - {{ smartcheck_registry }}
          - {{ registry_nodeport }}
      auth:
        userName: {{ smartcheck_username }}
        masterPassword: {{ auth_masterPassword }}
      activationCode: {{ activationCode }}
      persistence:
        enabled: {{ persistence_enabled }}
        db:
          storageClassName: {{ persistence_storageClassName }}
        vulnerabilityDB:
          storageClassName: {{ persistence_storageClassName }}
        metrics:
          storageClassName: {{ persistence_storageClassName }}

  # password: {{ smartcheck_password }}

# Persistence variants - in k8s or external db
# Variant 1: Within the k8s cluster
      # persistence:
      #   enabled: {{ persistence_enabled }}
      #   db:
      #     storageClassName: {{ persistence_storageClassName }}
      #   vulnerabilityDB:
      #     storageClassName: {{ persistence_storageClassName }}
      #   metrics:
      #     storageClassName: {{ persistence_storageClassName }}

# Variant 2: Within an external database
# First, create a database in PSQL >9.6, then logon on postgres as postgres user
# !!The database needs to have the same name as the database user!!
# $ psql
# postgres=# create role "dssc" with password 'password' login createdb createrole;
# postgres=# create database "dssc" with owner "dssc";
      # db:
      #   host: <HOST>
      #   port: 5432
      #   tls:
      #     mode: disable
      #   user: {{ smartcheck_database_username }}
      #   password: {{ smartcheck_database_password }}

- name: Download Deep Security Smart Check Chart
  become: true
  become_user: ubuntu
  get_url:
    url: "{{ dssc_chart }}"
    dest: /tmp/master.tar.gz
    mode: '0640'

- name: Unpack Chart
  become: true
  become_user: ubuntu
  unarchive:
    src: /tmp/master.tar.gz
    dest: /tmp/
    remote_src: yes

- name: Create Manual Deployment Templates for Deep Security Smart Check
  become: true
  become_user: ubuntu
  shell: helm template --namespace {{ dssc_namespace }} --values overrides-smartcheck.yml {{ dssc_name }} /tmp/smartcheck-helm-master/. > smartcheck.yaml
  args:
    chdir: $HOME
    creates: deepsecurity-smartcheck.yml

- name: Print Manual Deployment Command
  debug:
    msg:
      - kubectl create namespace {{ dssc_namespace }}
      - kubectl apply --namespace {{ dssc_namespace }} -f smartcheck.yaml >> smartcheck.log

- name: Create Deep Security Smart Check Namespace
  become: true
  become_user: ubuntu
  shell: kubectl create namespace {{ dssc_namespace }} --dry-run=true -o yaml | kubectl apply -f -
  args:
    chdir: $HOME

- name: Install Deep Security Smart Check
  become: true
  become_user: ubuntu
  shell: helm install --namespace {{ dssc_namespace }} --values overrides-smartcheck.yml {{ dssc_name }} {{ dssc_chart }} >> smartcheck.log
  args:
    chdir: $HOME
    creates: smartcheck.log

- name: Deep Security Smart Check patch port
  become: true
  become_user: ubuntu
  command: kubectl patch service -n {{ dssc_namespace }} proxy --type='json' --patch='[{"op":"replace", "path":"/spec/ports/0/nodePort", "value":{{ smartcheck_nodeport }}}]'
  ignore_errors: yes

- name: Fetch smartcheck.log
  become: true
  become_user: ubuntu
  fetch:
    src: /home/ubuntu/smartcheck.log
    dest: ./site_{{ type }}/
    flat: yes

- name: Count Smart Check pods
  become: true
  become_user: ubuntu
  shell: kubectl -n smartcheck get pods | grep -c "\-"
  register: count_result

- name: Check if all started Smart Check pods are in running state
  become: true
  become_user: ubuntu
  shell: if [ $(kubectl -n smartcheck get pods | grep -c ".*Running") -eq {{ count_result.stdout }} ] ; then exit 0 ; else exit 1 ; fi
  register: grep_result
  until: grep_result.rc == 0
  retries: 60
  delay: 10
  ignore_errors: yes
  when: site_deploy_kubernetes == True
