---
# #####################################################################
# Configure Smart Check
# #####################################################################
# Depending on the environment, inventory_hostname might be a dns name or an ip
# We now need effectively the ip on which ansible or we might reach the
# k8s master.
- name: Get ipaddr of k8smaster
  set_fact:
    remote_ip: "{{ inventory_hostname | ipaddr }}"

- name: Get ipaddr of k8smaster
  set_fact:
    remote_ip: "{{ k8smaster_ip }}"
  when: not remote_ip

- name: Initial Configuration of Smart Check
  block:
    - name: Query password
      become: true
      become_user: ubuntu
      k8s_info:
        api_version: v1
        kind: secrets
        name: deepsecurity-smartcheck-auth
        namespace: smartcheck
      register: dsscsecrets

    - name: Authenticate to Smart Check (Waiting for Smart Check to be in Running State)
      uri:
        url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/sessions
        method: POST
        validate_certs: no
        body_format: json
        body: |
          {
            "user": {
              "userid": "{{ dsscsecrets.resources[0].data.userName | b64decode }}",
              "password": "{{ dsscsecrets.resources[0].data.password | b64decode }}"
            }
          }
        status_code: 201
      register: login
      ignore_errors: yes
      until: login.status == 201
      retries: 60
      delay: 10

    - name: Change Initial Administrator Password
      uri:
        url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/users/{{ login.json.user.id }}/password
        method: POST
        validate_certs: no
        headers:
          Authorization: "Bearer {{ login.json.token }}"
        body_format: json
        body: |
          {
            "oldPassword": "{{ dsscsecrets.resources[0].data.password | b64decode }}",
            "newPassword": "{{ smartcheck_password }}"
          }
        status_code: 200
  when: smartcheck_installed != dssc_name

- name: Authenticate to Smart Check
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/sessions
    method: POST
    validate_certs: no
    body_format: json
    body: |
      {
        "user": {
          "userid": "{{ smartcheck_username }}",
          "password": "{{ smartcheck_password }}"
        }
      }
    status_code: 201
  register: login
  ignore_errors: yes
  until: login.status == 201
  retries: 60
  delay: 10

# Configure Smart Check
- name: Create Content Override for libgnutls.so.30.23.2
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/overrides/contents
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "filename": "usr/lib/x86_64-linux-gnu/libgnutls.so.30.23.2",
        "rule": "private_keys_pem",
        "registry": "*",
        "repository": "*",
        "tag": "*",
        "expires": "2029-10-01T00:00:00Z",
        "comment": "Allowing crypto-selftests-pk.c private key for 10 years.."
      }
    status_code: 201

- name: Create Content Override for ssl-cert-snakeoil.key
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/overrides/contents
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "filename": "etc/ssl/private/ssl-cert-snakeoil.key",
        "rule": "private_keys_pem",
        "registry": "*",
        "repository": "*",
        "tag": "*",
        "expires": "2029-10-01T00:00:00Z",
        "comment": "Allowing ssl-cert-snakeoil.key private key for 10 years.."
      }
    status_code: 201

- name: Create Content Override for test_pkcs1_15.py
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/overrides/contents
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "filename": "usr/lib/python2.7/dist-packages/Crypto/SelfTest/Cipher/test_pkcs1_15.py",
        "rule": "private_keys_pem",
        "registry": "*",
        "repository": "*",
        "tag": "*",
        "expires": "2029-10-01T00:00:00Z",
        "comment": "Allowing test_pkcs1_15.py private key for 10 years.."
      }
    status_code: 201

- name: Create Content Override for test_pkcs1_15.pyc
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/overrides/contents
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "filename": "usr/lib/python2.7/dist-packages/Crypto/SelfTest/Cipher/test_pkcs1_15.pyc",
        "rule": "private_keys_pem",
        "registry": "*",
        "repository": "*",
        "tag": "*",
        "expires": "2029-10-01T00:00:00Z",
        "comment": "Allowing test_pkcs1_15.pyc private key for 10 years.."
      }
    status_code: 201

- name: Create Content Override for test_importKey.py
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/overrides/contents
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "filename": "usr/lib/python2.7/dist-packages/Crypto/SelfTest/PublicKey/test_importKey.py",
        "rule": "private_keys_pem",
        "registry": "*",
        "repository": "*",
        "tag": "*",
        "expires": "2029-10-01T00:00:00Z",
        "comment": "Allowing test_importKey.py private key for 10 years.."
      }
    status_code: 201

- name: Create Content Override for test_importKey.pyc
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/overrides/contents
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "filename": "usr/lib/python2.7/dist-packages/Crypto/SelfTest/PublicKey/test_importKey.pyc",
        "rule": "private_keys_pem",
        "registry": "*",
        "repository": "*",
        "tag": "*",
        "expires": "2029-10-01T00:00:00Z",
        "comment": "Allowing test_importKey.pyc private key for 10 years.."
      }
    status_code: 201

- name: List Registries
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/registries
    method: GET
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    status_code: 200
  register: registries

- name: Test if K8s Registry Already Exists
  set_fact:
    k8s_registry: True
  when: item.name == "K8S Registry"
  loop: "{{ registries.json.registries }}"

- name: Create Registry to K8s Registry
  uri:
    url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/registries?scan=true
    method: POST
    validate_certs: no
    headers:
      Authorization: "Bearer {{ login.json.token }}"
    body_format: json
    body: |
      {
        "name": "K8S Registry",
        "description": "Registry running within the cluster\n",
        "host": "{{ inventory_hostname }}:{{ registry_nodeport }}",
        "credentials": {
          "username": "{{ cluster_registry_username }}",
          "password": "{{ cluster_registry_password }}",
        },
        "insecureSkipVerify": true,
        "filter": {
          "include": [
            "*"
          ],
          "exclude": [
            "experimental/*"
          ]
        },
        "schedule": true
      }
    status_code: 201
  when: k8s_registry is undefined

#   - name: Create Registry to PreRegistry Scan Registry
#     uri:
#       url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/registries?scan=true
#       method: POST
#       validate_certs: no
#       headers:
#         Authorization: "Bearer {{ login.json.token }}"
#       body_format: json
#       body: |
#         {
#           "name": "Smart Check Registry",
#           "description": "Built in Registry of Smart Check\n",
#           "host": "{{ inventory_hostname }}:{{ smartcheck_registry }}",
#           "credentials": {
#             "username": "{{ smartcheck_registry_username }}",
#             "password": "{{ smartcheck_registry_password }}",
#           },
#           "insecureSkipVerify": true,
#           "filter": {
#             "include": [
#               "*"
#             ],
#             "exclude": [
#               "experimental/*"
#             ]
#           },
#           "schedule": true
#         }
#       status_code: 201
# when: pwc_done_result.stat.exists == False

# TODO: FINISH ME
    # - name: Create Content Rule for PHP in Images
    #   uri:
    #     url: https://{{ remote_ip }}:{{ smartcheck_nodeport }}/api/registries?scan=true
    #     method: POST
    #     validate_certs: no
    #     headers:
    #       Authorization: "Bearer {{ login.json.token }}"
    #     body_format: json
    #     body: |
    #       rule php_in_image
    #       {
    #           meta:
    #               description = "Finds image files w/ PHP code in images"
    #               severity = "critical"
    #
    #           strings:
    #               $gif = /^GIF8[79]a/
    #               $jfif = { ff d8 ff e? 00 10 4a 46 49 46 }
    #               $png = { 89 50 4e 47 0d 0a 1a 0a }
    #
    #               $php_tag = "<?php"
    #
    #           condition:
    #               (($gif at 0) or
    #               ($jfif at 0) or
    #               ($png at 0)) and
    #
    #               $php_tag
    #       }
    #     status_code: 201
