# #####################################################################
# Configurator for MOADSD-NG on AWS
# #####################################################################
- name: Include Configuration
  include_vars: configuration.yml

- name: include
  include: configure_assertions.yml

- name: Set AWS Configuration
  set_fact:
    aws_region: "{{ lookup('ini', 'region section=default file=~/.aws/config') }}"
    aws_zone: "{{ lookup('ini', 'region section=default file=~/.aws/config') }}a"
    aws_access_key: "{{ lookup('ini', 'aws_access_key_id section=default file=~/.aws/credentials') }}"
    aws_secret_key: "{{ lookup('ini', 'aws_secret_access_key section=default file=~/.aws/credentials') }}"

- name: Check for Ubuntu AMI
  ec2_ami_info:
    region: "{{ aws_region }}"
    image_ids: "{{ ami_ubuntu }}"
  ignore_errors: true
  no_log: yes
  register: existence_ami_ubuntu

- name: Check for Mandatory AMI Availablity in Region
  assert:
    that:
      - existence_ami_ubuntu is not failed
    fail_msg: "Mandatory Ubuntu AMI Missing in Selected Region {{ aws_region }}"

- block:
  - name: Check for RedHat AMI
    ec2_ami_info:
      region: "{{ aws_region }}"
      image_ids: "{{ ami_redhat }}"
    ignore_errors: true
    no_log: yes
    register: existence_ami_redhat

  - name: Check for Mandatory AMI Availablity in Region
    assert:
      that:
        - existence_ami_redhat is not failed
      fail_msg: "Mandatory RedHat AMI Missing in Selected Region {{ aws_region }}"
  when:
    - site_deploy_deepsecurity
    - deepsecurity_variant == "dsm"

- block:
  - name: Check for AMI
    ec2_ami_info:
      region: "{{ aws_region }}"
      image_ids: "{{ ami_windows }}"
    ignore_errors: true
    no_log: yes
    register: existence_ami_windows

  - name: Check for Mandatory AMI Availablity in Region
    assert:
      that:
        - existence_ami_windows is not failed
      fail_msg: "Mandatory Windows AMI Missing in Selected Region {{ aws_region }}"
  when:
    - site_deploy_deepsecurity

- name: Find moadsd-ng Key Name in .ssh
  find:
    paths: "~/.ssh"
    patterns: "moadsd-ng*"
  register: moadsd_ng_key_name

- name: Stat AWS Key File
  stat:
    path: "{{ moadsd_ng_key_name.files[0].path }}"
  register: key_ansible_exists

- name: Check for AWS Key File
  assert:
    that:
      - key_ansible_exists.stat.exists
    fail_msg: "AWS Key File is Missing"

#
# AWS Configuration
#
- name: Create Owner Configuration
  template:
    src: owner.j2
    dest: ./.owner

- name: Create AWS Configuration
  template:
    src: environment_aws_vars.j2
    dest: ./vars/environment_aws_vars.yml

- name: Create AWS Dynamic Inventory Configuration
  template:
    src: ec2.ini.j2
    dest: ./ec2.ini

- name: Choosing Python Version 2
  set_fact:
    python_version: python
  when: ansible_python_version | regex_search("^2")

- name: Choosing Python Version 3
  set_fact:
    python_version: python3
  when: ansible_python_version | regex_search("^3")

- name: Create AWS Dynamic Inventory Configuration
  template:
    src: ec2.py.j2
    dest: ./ec2.py
    mode: 0755

- name: Setting moadsd-ng AWS Pem
  set_fact:
    aws_pem: "{{ moadsd_ng_key_name.files[0].path }}"

- name: Setting moadsd-ng AWS Pem
  set_fact:
    aws_key_name: "{{ moadsd_ng_key_name.files[0].path | basename | replace('.pem','') }}"

- name: Create AWS Secret Configuration
  template:
    src: environment_aws_secrets.j2
    dest: ./vars/environment_aws_secrets.yml

- name: Encrypt AWS Secret Configuration
  shell: ansible-vault encrypt --vault-password-file ../.vault-pass.txt ./vars/environment_aws_secrets.yml

#
# SITE
#
- name: Read id_rsa.pub
  command: cat "~/.ssh/id_rsa.pub"
  register: public_key

- name: Set Fact for Public Key
  set_fact:
    ansible_ssh_key: "{{ public_key.stdout }}"

- name: Create Site Secret Configuration
  template:
    src: site_secrets.j2
    dest: ./vars/site_secrets.yml

- name: Encrypt Site Secret Configuration
  shell: ansible-vault encrypt --vault-password-file ../.vault-pass.txt ./vars/site_secrets.yml
