---
# #####################################################################
# Deploy OPA
# #####################################################################
- name: Create Subdirectory opa
  become: true
  become_user: ubuntu
  file:
    path: "/home/ubuntu/opa"
    state: directory

- name: Create OPA Namespace
  become: true
  become_user: ubuntu
  shell: kubectl create namespace {{ opa_namespace }} --dry-run=true -o yaml | kubectl apply -f -
  args:
    chdir: $HOME

- name: Create OPA Server Certificate Configuration
  become: true
  become_user: ubuntu
  copy:
    dest: /home/ubuntu/opa/webhook-server-tls.conf
    mode: 0640
    content: |
      [req]
      req_extensions = v3_req
      distinguished_name = req_distinguished_name
      [req_distinguished_name]
      [ v3_req ]
      basicConstraints = CA:FALSE
      keyUsage = nonRepudiation, digitalSignature, keyEncipherment
      extendedKeyUsage = clientAuth, serverAuth

- name: Creating OPA Certification Authority and Server Certificate
  become: true
  become_user: ubuntu
  shell: |
    openssl genrsa -out opa/admission-ca.key 2048
    openssl req -x509 -new -nodes -key opa/admission-ca.key -days 100000 -out opa/admission-ca.crt -subj "/CN=admission_ca"
    openssl genrsa -out opa/webhook-server-tls.key 2048
    openssl req -new -key opa/webhook-server-tls.key -out opa/webhook-server-tls.csr -subj "/CN=opa.opa.svc" -config opa/webhook-server-tls.conf
    openssl x509 -req -in opa/webhook-server-tls.csr -CA opa/admission-ca.crt -CAkey opa/admission-ca.key -CAcreateserial -out opa/webhook-server-tls.crt -days 100000 -extensions v3_req -extfile opa/webhook-server-tls.conf
  args:
    chdir: $HOME

- name: Creating OPA Secret
  become: true
  become_user: ubuntu
  shell: kubectl -n opa create secret tls opa-server --cert=opa/webhook-server-tls.crt --key=opa/webhook-server-tls.key
  args:
    chdir: $HOME

- name: Create Admission Controller Deployment Configuration
  become: true
  become_user: ubuntu
  copy:
    dest: /home/ubuntu/opa/admission-controller.yaml
    mode: 0640
    content: |
      # Grant OPA/kube-mgmt read-only access to resources. This lets kube-mgmt
      # replicate resources into OPA so they can be used in policies.
      kind: ClusterRoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        name: opa-viewer
      roleRef:
        kind: ClusterRole
        name: view
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: Group
        name: system:serviceaccounts:opa
        apiGroup: rbac.authorization.k8s.io
      ---
      # Define role for OPA/kube-mgmt to update configmaps with policy status.
      kind: Role
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        namespace: opa
        name: configmap-modifier
      rules:
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["update", "patch"]
      ---
      # Grant OPA/kube-mgmt role defined above.
      kind: RoleBinding
      apiVersion: rbac.authorization.k8s.io/v1
      metadata:
        namespace: opa
        name: opa-configmap-modifier
      roleRef:
        kind: Role
        name: configmap-modifier
        apiGroup: rbac.authorization.k8s.io
      subjects:
      - kind: Group
        name: system:serviceaccounts:opa
        apiGroup: rbac.authorization.k8s.io
      ---
      kind: Service
      apiVersion: v1
      metadata:
        name: opa
        namespace: opa
      spec:
        selector:
          app: opa
        ports:
        - name: https
          protocol: TCP
          port: 443
          targetPort: 443
      ---
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        labels:
          app: opa
        namespace: opa
        name: opa
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: opa
        template:
          metadata:
            labels:
              app: opa
            name: opa
          spec:
            containers:
              # WARNING: OPA is NOT running with an authorization policy configured. This
              # means that clients can read and write policies in OPA. If you are
              # deploying OPA in an insecure environment, be sure to configure
              # authentication and authorization on the daemon. See the Security page for
              # details: https://www.openpolicyagent.org/docs/security.html.
              - name: opa
                image: openpolicyagent/opa:0.19.1
                args:
                  - "run"
                  - "--server"
                  - "--tls-cert-file=/certs/tls.crt"
                  - "--tls-private-key-file=/certs/tls.key"
                  - "--addr=0.0.0.0:443"
                  - "--addr=http://127.0.0.1:8181"
                  - "--log-format=json-pretty"
                  - "--set=decision_logs.console=true"
                volumeMounts:
                  - readOnly: true
                    mountPath: /certs
                    name: opa-server
                readinessProbe:
                  httpGet:
                    path: /health?plugins&bundle
                    scheme: HTTPS
                    port: 443
                  initialDelaySeconds: 3
                  periodSeconds: 5
                livenessProbe:
                  httpGet:
                    path: /health
                    scheme: HTTPS
                    port: 443
                  initialDelaySeconds: 3
                  periodSeconds: 5
              - name: kube-mgmt
                image: openpolicyagent/kube-mgmt:0.8
                args:
                  - "--replicate-cluster=v1/namespaces"
                  - "--replicate=extensions/v1beta1/ingresses"
            volumes:
              - name: opa-server
                secret:
                  secretName: opa-server
      ---
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: opa-default-system-main
        namespace: opa
      data:
        main: |
          package system

          import data.kubernetes.admission

          main = {
            "apiVersion": "admission.k8s.io/v1",
            "kind": "AdmissionReview",
            "response": response,
          }

          default response = {"allowed": true}

          response = {
              "allowed": false,
              "status": {
                  "reason": reason,
              },
          } {
              reason = concat(", ", admission.deny)
              reason != ""
          }

- name: Apply Admission Controller Deployment Configuration
  become: true
  become_user: ubuntu
  shell: kubectl apply -f opa/admission-controller.yaml --dry-run=true -o yaml | kubectl apply -f -
  args:
    chdir: $HOME

- name: Encode CA Certificate
  become: true
  become_user: ubuntu
  shell: cat opa/admission-ca.crt | base64 | tr -d '\n'
  args:
    chdir: $HOME
  register: cacrt

# NOT WORKING WITH V1 API - NEED TO CHECK
# - name: Create Validating Webhook Deployment Configuration
#   become: true
#   become_user: ubuntu
#   copy:
#     dest: /home/ubuntu/opa/webhook-configuration.yaml
#     mode: 0640
#     content: |
#       kind: ValidatingWebhookConfiguration
#       apiVersion: admissionregistration.k8s.io/v1
#       metadata:
#         name: opa-validating-webhook
#       webhooks:
#         - name: validating-webhook.openpolicyagent.org
#           namespaceSelector:
#             matchExpressions:
#             - key: openpolicyagent.org/webhook
#               operator: NotIn
#               values:
#               - ignore
#           rules:
#             - operations: ["CREATE", "UPDATE"]
#               apiGroups: ["*"]
#               apiVersions: ["*"]
#               resources: ["*"]
#               # scope: "Namespaced"
#           clientConfig:
#             caBundle: "{{ cacrt.stdout }}"
#             service:
#               namespace: opa
#               name: opa
#           admissionReviewVersions: ["v1", "v1beta1"]
#           sideEffects: None
#           timeoutSeconds: 5

- name: Create Validating Webhook Deployment Configuration
  become: true
  become_user: ubuntu
  copy:
    dest: /home/ubuntu/opa/webhook-configuration.yaml
    mode: 0640
    content: |
      kind: ValidatingWebhookConfiguration
      apiVersion: admissionregistration.k8s.io/v1beta1
      metadata:
        name: opa-validating-webhook
      webhooks:
        - name: validating-webhook.openpolicyagent.org
          namespaceSelector:
            matchExpressions:
            - key: openpolicyagent.org/webhook
              operator: NotIn
              values:
              - ignore
          rules:
            - operations: ["CREATE", "UPDATE"]
              apiGroups: ["*"]
              apiVersions: ["*"]
              resources: ["*"]
          clientConfig:
            caBundle: "{{ cacrt.stdout }}"
            service:
              namespace: opa
              name: opa

- name: Label Namespace kube-system openpolicyagent.org/webhook=ignore
  become: true
  become_user: ubuntu
  shell: kubectl label ns kube-system openpolicyagent.org/webhook=ignore
  args:
    chdir: $HOME
  ignore_errors: true

- name: Label Namespace opa openpolicyagent.org/webhook=ignore
  become: true
  become_user: ubuntu
  shell: kubectl label ns opa openpolicyagent.org/webhook=ignore
  args:
    chdir: $HOME
  ignore_errors: true

- name: Apply Validating Webhook Deployment Configuration
  become: true
  become_user: ubuntu
  shell: kubectl apply -f opa/webhook-configuration.yaml --dry-run=true -o yaml | kubectl apply -f -
  args:
    chdir: $HOME
