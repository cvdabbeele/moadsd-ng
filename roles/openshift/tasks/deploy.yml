---
# #####################################################################
# Create an OpenShift instance
# #####################################################################
- name: Install NetworkManager and Nginx
  become: true
  yum:
    name: "{{ packages }}"
  vars:
    packages:
      - nginx
      - NetworkManager

- name: Download CodeReady Containers
  become: true
  become_user: ansible
  get_url:
    url: https://mirror.openshift.com/pub/openshift-v4/clients/crc/{{ crc_version }}/crc-linux-amd64.tar.xz
    dest: /home/ansible/crc-linux-amd64.tar.xz
    mode: 0660

- name: CodeReady Containers Extract
  become: true
  become_user: ansible
  unarchive:
    src: /home/ansible/crc-linux-amd64.tar.xz
    dest: /home/ansible
    remote_src: yes

- name: Copy CRC to Path
  become: true
  copy:
    src: /home/ansible/crc-linux-{{ crc_version }}-amd64/crc
    dest: /usr/local/bin/
    remote_src: yes
    mode: 0755

- name: Add Path
  become: true
  lineinfile:
    path: /etc/profile.d/sh.local
    insertafter: EOF
    line: 'export PATH="/home/ansible/.crc/bin:/usr/local/bin:$PATH"'

# Have the pull secret
# https://cloud.redhat.com/openshift/install/crc/installer-provisioned
- name: Install CodeReady Containers
  become: true
  become_user: ansible
  shell: /usr/local/bin/crc setup >> crc-setup.log
  args:
    chdir: $HOME
    creates: crc-setup.log

- name: Create Pull Secret File
  become: true
  become_user: ansible
  copy:
    dest: /home/ansible/.pull.secret
    mode: 0640
    content: |
      {{ openshift_pull_secret }}

- name: Start CodeReady Containers
  become: true
  become_user: ansible
  shell: /usr/local/bin/crc start -p .pull.secret >> crc-start.log
  args:
    chdir: $HOME
    creates: crc-start.log

# crc oc-env
# export PATH="/home/ansible/.crc/bin:$PATH"
# eval $(crc oc-env)
# oc login -u developer -p developer https://api.crc.testing:6443
# Ã¤ that does work
# # but required a loal proxy on the instance to access the console remotely :(

# # Next Proxy
# $ less /etc/nginx/passthrough.conf
# ## tcp LB  and SSL passthrough for backend ##
# stream {
#     upstream openshift {
#         ## server api.crc.testing:443 max_fails=3 fail_timeout=10s;
#         server console-openshift-console.apps-crc.testing:6443;
#         ##  max_fails=3 fail_timeout=10s;
#     }
#
# log_format basic '$remote_addr [$time_local] '
#                  '$protocol $status $bytes_sent $bytes_received '
#                  '$session_time "$upstream_addr" '
#                  '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';
#
#     access_log /var/log/nginx/openshift_access.log basic;
#     error_log  /var/log/nginx/openshift_error.log;
#
#     server {
#         listen 443;
#         proxy_pass openshift;
#         proxy_next_upstream on;
#     }
# }
#
# $ less /etx/nginx/nginx.configuration
# #user  nobody;
# worker_processes  1;
# load_module '/usr/lib64/nginx/modules/ngx_stream_module.so';
#
# #error_log  logs/error.log;
# #error_log  logs/error.log  notice;
# #error_log  logs/error.log  info;
#
# #pid        logs/nginx.pid;
#
#
# events {
#     worker_connections  1024;
# }
#
# include /etc/nginx/passthrough.conf;
#
# http {
#     include       mime.types;
#     ...
#
#
# # yum -y install yum-utils
# # # yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
# # yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-eu-central-1-rhel-server-optional
# # yum install -y certbot python2-certbot-nginx

- name: Debug
  debug:
    msg: "Not yet implemented"
