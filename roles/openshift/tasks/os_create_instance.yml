---
# #####################################################################
# Create an OpenShift instance
# #####################################################################

# grep -cw vmx /proc/cpuinfo   ---> 4
# sudo apt update
# sudo apt install -y qemu-kvm libvirt-daemon libvirt-daemon-system
# sudo usermod -a -G libvirt $(whoami)
# newgrp libvirt
#
# sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-ubuntu16.04 -o /usr/local/bin/docker-machine-driver-kvm
# sudo curl -L https://github.com/kubernetes/minikube/releases/download/v1.7.2/docker-machine-driver-kvm2 -o /usr/local/bin/docker-machine-driver-kvm
# sudo chmod +x /usr/local/bin/docker-machine-driver-kvm
#
# systemctl is-active libvirtd
# active
#
# sudo virsh net-list --all
#
#  Name                 State      Autostart     Persistent
# ----------------------------------------------------------
#  default              active     yes           yes
#
# wget https://github.com/minishift/minishift/releases/download/v1.34.2/minishift-1.34.2-linux-amd64.tgz
# tar xfvz minishift-1.34.2-linux-amd64.tgz
# sudo cp minishift-1.34.2-linux-amd64/minishift /usr/local/bin/
#
# minishift start

# Next test:
# sudo apt update
# sudo apt install -y qemu-kvm libvirt-bin virt-top libguestfs-tools virtinst bridge-utils
# sudo modprobe vhost_net
# sudo lsmod | grep vhost
# echo "vhost_net" | sudo tee -a /etc/modules
# sudo usermod -a -G libvirt $(whoami)
# newgrp libvirt
#
# sudo apt-get install apt-transport-https ca-certificates curl software-properties-common
# curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
# sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
# sudo apt-get update
# sudo apt-get install docker-ce
# sudo usermod -aG docker $(whoami)
#
# sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.7.0/docker-machine-driver-kvm -o /usr/local/bin/docker-machine-driver-kvm
# sudo curl -L https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-ubuntu16.04 -o /usr/local/bin/docker-machine-driver-kvm
# sudo chmod +x /usr/local/bin/docker-machine-driver-kvm
## sudo curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2 -o /usr/local/bin/docker-machine-driver-kvm2
## sudo chmod +x /usr/local/bin/docker-machine-driver-kvm2
#
# systemctl is-active libvirtd
# active
#
# sudo virsh net-list --all
#
#  Name                 State      Autostart     Persistent
# ----------------------------------------------------------
#  default              active     yes           yes
#
# wget https://github.com/minishift/minishift/releases/download/v1.34.2/minishift-1.34.2-linux-amd64.tgz
# tar xfvz minishift-1.34.2-linux-amd64.tgz
# sudo cp minishift-1.34.2-linux-amd64/minishift /usr/local/bin/
#
# minishift config set memory 8192
# minishift config set cpus 4
# minishift start

# Minikube:
# wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
# chmod +x minikube-linux-amd64
# sudo mv minikube-linux-amd64 /usr/local/bin/minikube
# minikube version
# curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
# chmod +x kubectl
# sudo mv kubectl  /usr/local/bin/
# kubectl version -o json
# minikube config set vm-driver kvm2
# sudo virsh list
# kubectl cluster-info



# CodeReady Containers:
# RHEL 7.5
# sudo su
# yum install -y NetworkManager
# exit
# curl -O https://mirror.openshift.com/pub/openshift-v4/clients/crc/latest/crc-linux-amd64.tar.xz
# tar xfv crc-linux-amd64.tar.xz
# sudo cp crc-linux-1.6.0-amd64/crc /usr/local/bin/
# export PATH="/usr/local/bin:$PATH"
# echo 'export PATH="/usr/local/bin:$PATH"' > ~/.bashrc
# # Have the pull secret
# # https://cloud.redhat.com/openshift/install/crc/installer-provisioned
# crc setup
# crc start
# crc oc-env
# export PATH="/home/ansible/.crc/bin:$PATH"
# eval $(crc oc-env)
# oc login -u developer -p developer https://api.crc.testing:6443
# Ã¤ that does work
# # but required a loal proxy on the instance to access the console remotely :(

# Next Proxy
$ less /etc/nginx/passthrough.conf
## tcp LB  and SSL passthrough for backend ##
stream {
    upstream openshift {
        ## server api.crc.testing:443 max_fails=3 fail_timeout=10s;
        server console-openshift-console.apps-crc.testing:443;
        ##  max_fails=3 fail_timeout=10s;
    }

log_format basic '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time "$upstream_addr" '
                 '"$upstream_bytes_sent" "$upstream_bytes_received" "$upstream_connect_time"';

    access_log /var/log/nginx/openshift_access.log basic;
    error_log  /var/log/nginx/openshift_error.log;

    server {
        listen 443;
        proxy_pass openshift;
        proxy_next_upstream on;
    }
}

$ less /etx/nginx/nginx.configuration
#user  nobody;
worker_processes  1;
load_module '/usr/lib64/nginx/modules/ngx_stream_module.so';

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

include /etc/nginx/passthrough.conf;

http {
    include       mime.types;
    ...


# yum -y install yum-utils
# # yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-REGION-rhel-server-optional
# yum-config-manager --enable rhui-REGION-rhel-server-extras rhui-eu-central-1-rhel-server-optional
# yum install -y certbot python2-certbot-nginx

- name: Debug
  debug:
    msg: "Not yet implemented"
