---
# #####################################################################
# Terminate the network in AWS environment
# #####################################################################
- name: Current play
  debug:
    msg:
      - "Terminating network {{ moadsd_ng_prefix }}-vpc"

- name: Query VPC id
  ec2_vpc_net_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ moadsd_ng_prefix }}-vpc"
      "tag:owner": "{{ moadsd_ng_owner }}"
  register: ec2_vpc_net_result

- name: Query Public Subnet id
  ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ moadsd_ng_prefix }}-public-subnet"
      "tag:owner": "{{ moadsd_ng_owner }}"
  register: public_subnet_result

- name: Query Private Subnet id
  ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ moadsd_ng_prefix }}-private-subnet"
      "tag:owner": "{{ moadsd_ng_owner }}"
  register: private_subnet_result

- name: Query NAT Gateway id
  ec2_vpc_nat_gateway_info:
    region: "{{ aws_region }}"
    filters:
      subnet-id: "{{ public_subnet_result.subnets[0].subnet_id }}"
  register: nat_gateway_result
  when: public_subnet_result.subnets

- name: Terminate NAT Gateway and wait for deleted status.
  ec2_vpc_nat_gateway:
    state: absent
    nat_gateway_id: "{{ item.nat_gateway_id }}"
    wait: yes
    wait_timeout: 500
    release_eip: yes
    region: "{{ aws_region }}"
  loop: "{{ nat_gateway_result.result }}"
  when: nat_gateway_result is not skipped

- name: Terminate EC2 VPC Internet Gateway
  ec2_vpc_igw:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpcs[0].id }}"
    region: "{{ aws_region }}"
    state: absent
  when: ec2_vpc_net_result.vpcs | length > 0

- name: Terminate EC2 VPC Private Subnet
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpcs[0].id }}"
    region: "{{ aws_region }}"
    state: absent
    cidr: "{{ aws_private_subnet_cidr_block }}"
  when: private_subnet_result.subnets | length > 0

- name: Terminate EC2 VPC Public Subnet
  ec2_vpc_subnet:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpcs[0].id }}"
    region: "{{ aws_region }}"
    state: absent
    cidr: "{{ aws_public_subnet_cidr_block }}"
  when: public_subnet_result.subnets | length > 0

- name: Terminate EC2 VPC Public Subnet Route Table
  ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpcs[0].id }}"
    region: "{{ aws_region }}"
    state: absent
    tags:
      Name: "{{ moadsd_ng_prefix }}-public-rt"
      owner: "{{ moadsd_ng_owner }}"
  register: public_route_table
  when: ec2_vpc_net_result.vpcs | length > 0

- name: Terminate EC2 VPC Private Subnet Route Table
  ec2_vpc_route_table:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    vpc_id: "{{ ec2_vpc_net_result.vpcs[0].id }}"
    region: "{{ aws_region }}"
    state: absent
    tags:
      Name: "{{ moadsd_ng_prefix }}-private-rt"
      owner: "{{ moadsd_ng_owner }}"
  register: private_route_table
  when: ec2_vpc_net_result.vpcs | length > 0

- name: Terminate VPC
  local_action:
    module: ec2_vpc_net
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    name: "{{ moadsd_ng_prefix }}-vpc"
    cidr_block: "{{ aws_vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: absent
