---
# #####################################################################
# Create a linux instance in AWS environment
# #####################################################################
- name: Current play
  debug:
    msg: "Creating instance {{ moadsd_ng_prefix }}-{{ instance_name }}-instance"

- name: Ensure the project network is created
  include: ec2_create_network.yml

- name: Create EC2 public instance
  block:
    - name: Create EC2 Security Group for public instance
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        name: "{{ moadsd_ng_prefix }}-{{ instance_name }}-sg"
        description: "{{ moadsd_ng_prefix }}-{{ instance_name }}-sg"
        tags:
          Name: "{{ moadsd_ng_prefix }}-{{ instance_name }}-sg"
        rules:
          - proto: tcp
            ports: "{{ instance_ports_anywhere }}"
            cidr_ip: '0.0.0.0/0'
          - proto: udp
            ports: "{{ instance_ports_anywhere }}"
            cidr_ip: '0.0.0.0/0'
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_public_subnet_cidr_block }}"
          - proto: udp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_public_subnet_cidr_block }}"
          - proto: tcp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_private_subnet_cidr_block }}"
          - proto: udp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_private_subnet_cidr_block }}"
      register: public_security_group_results

    - name: Create a linux server instance
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ moadsd_ng_prefix }}-{{ instance_name }}-instance"
        region: "{{ aws_region }}"
        instance_type: "{{ instance_machine_type }}"
        user_data: "{{ instance_startup_script }}"
        image_id: "{{ instance_source_image }}"
        security_groups:
          - "{{ public_security_group_results.group_id }}"
        vpc_subnet_id: "{{ public_subnet_result.subnet.id }}"
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 32
              delete_on_termination: true
        tags:
          role: "{{ instance_tags }}"
          project: "{{ moadsd_ng_prefix }}"
        state: present
      register: ec2
      # async: 600
      # poll: 0

    - name: Create a linux server public address
      ec2_eip:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        release_on_disassociation: yes
        in_vpc: yes
        region: "{{ aws_region }}"
        device_id: "{{ ec2.instance_ids[0] }}"
        state: present
      register: eip

    - name: Output the IP
      debug:
        msg: "Allocated IP is {{ eip.public_ip }}"

    - name: Disable AWS src dst checks
      become: true
      become_user: ansible
      shell: aws ec2 modify-instance-attribute --instance-id {{ ec2.instance_ids[0] }} --region {{ aws_region }} --no-source-dest-check
      delegate_to: localhost
  when:
    - instance_public_address == True

- name: Create EC2 private instance
  block:
    - name: Create EC2 Security Group for private instance
      ec2_group:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        vpc_id: "{{ ec2_vpc_net_result.vpc.id }}"
        region: "{{ aws_region }}"
        state: present
        name: "{{ moadsd_ng_prefix }}-{{ instance_name }}-sg"
        description: "{{ moadsd_ng_prefix }}-{{ instance_name }}-sg"
        tags:
          Name: "{{ moadsd_ng_prefix }}-{{ instance_name }}-sg"
        rules:
          - proto: icmp
            from_port: 8
            to_port: -1
            cidr_ip: '0.0.0.0/0'
          - proto: tcp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_public_subnet_cidr_block }}"
          - proto: udp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_public_subnet_cidr_block }}"
          - proto: tcp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_private_subnet_cidr_block }}"
          - proto: udp
            ports: "{{ instance_ports_network }}"
            cidr_ip: "{{ aws_private_subnet_cidr_block }}"
      register: private_security_group_results

    - name: Create a linux server instance
      ec2_instance:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: "{{ moadsd_ng_prefix }}-{{ instance_name }}-instance"
        region: "{{ aws_region }}"
        instance_type: "{{ instance_machine_type }}"
        user_data: "{{ instance_startup_script }}"
        image_id: "{{ instance_source_image }}"
        security_groups:
          - "{{ private_security_group_results.group_id }}"
        vpc_subnet_id: "{{ private_subnet_result.subnet.id }}"
        network:
          assign_public_ip: false
        volumes:
          - device_name: /dev/sda1
            ebs:
              volume_size: 32
              delete_on_termination: true
        tags:
          role: "{{ instance_tags }}"
          project: "{{ moadsd_ng_prefix }}"
        state: present
      register: ec2
      async: 600
      poll: 0

    # - name: Disable AWS src dst checks
    #   become: true
    #   become_user: ansible
    #   shell: aws ec2 modify-instance-attribute --instance-id {{ ec2.instance_ids[0] }} --region {{ aws_region }} --no-source-dest-check
    #   delegate_to: localhost
  when:
    - instance_public_address == False

# FIXME VOLUME SIZE should be "{{ instance_size_gb | int }}"
          # "{{VOLUMES_CONFIG|from_yaml|to_json}}"

          # volume_size: "{{ instance_size_gb | int }}"

        # ebs: >
        #   {
        #   "volume_size": "{{ instance_size_gb | default(aws_default_image_size) | int }}"
        #   "volume_type": "gp2"
        #   }

          # volume_size: "{{ instance_size_gb |int }}"
          # delete_on_termination: true
